// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.query.sql

package database

import (
	"context"
	"database/sql"
)

const createAuthProvider = `-- name: CreateAuthProvider :one

INSERT INTO auth_provider (
    user_id,
    provider_name,
    provider_user_id
)
VALUES (?, ?, ?)
RETURNING id, user_id, provider_name, provider_user_id, created_at, updated_at
`

type CreateAuthProviderParams struct {
	UserID         string `json:"user_id"`
	ProviderName   string `json:"provider_name"`
	ProviderUserID string `json:"provider_user_id"`
}

// ---------------------------------------
// AuthProviders
// ---------------------------------------
func (q *Queries) CreateAuthProvider(ctx context.Context, arg CreateAuthProviderParams) (AuthProvider, error) {
	row := q.db.QueryRowContext(ctx, createAuthProvider, arg.UserID, arg.ProviderName, arg.ProviderUserID)
	var i AuthProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProviderName,
		&i.ProviderUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO user (
  email,
  password_hash,
  display_name
)
VALUES (?, ?, ?)
RETURNING id, email, password_hash, display_name, is_verified, created_at, updated_at
`

type CreateUserParams struct {
	Email        string         `json:"email"`
	PasswordHash sql.NullString `json:"password_hash"`
	DisplayName  sql.NullString `json:"display_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PasswordHash, arg.DisplayName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserSetting = `-- name: CreateUserSetting :one
INSERT INTO user_setting (
  user_id,
  theme,
  daily_new_cards_limit,
  notifications_enabled,
  tutorial_enabled
)
VALUES (?, ?, ?, ?, ?)
RETURNING id, user_id, theme, daily_new_cards_limit, notifications_enabled, tutorial_enabled, created_at, updated_at
`

type CreateUserSettingParams struct {
	UserID               string         `json:"user_id"`
	Theme                sql.NullString `json:"theme"`
	DailyNewCardsLimit   int64          `json:"daily_new_cards_limit"`
	NotificationsEnabled bool           `json:"notifications_enabled"`
	TutorialEnabled      bool           `json:"tutorial_enabled"`
}

func (q *Queries) CreateUserSetting(ctx context.Context, arg CreateUserSettingParams) (UserSetting, error) {
	row := q.db.QueryRowContext(ctx, createUserSetting,
		arg.UserID,
		arg.Theme,
		arg.DailyNewCardsLimit,
		arg.NotificationsEnabled,
		arg.TutorialEnabled,
	)
	var i UserSetting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Theme,
		&i.DailyNewCardsLimit,
		&i.NotificationsEnabled,
		&i.TutorialEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAuthProvider = `-- name: DeleteAuthProvider :exec
DELETE FROM auth_provider
WHERE id = ?
`

func (q *Queries) DeleteAuthProvider(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAuthProvider, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAuthProviderByUserAndName = `-- name: GetAuthProviderByUserAndName :one
SELECT id, user_id, provider_name, provider_user_id, created_at, updated_at FROM auth_provider
WHERE user_id = ?
  AND provider_name = ?
LIMIT 1
`

type GetAuthProviderByUserAndNameParams struct {
	UserID       string `json:"user_id"`
	ProviderName string `json:"provider_name"`
}

func (q *Queries) GetAuthProviderByUserAndName(ctx context.Context, arg GetAuthProviderByUserAndNameParams) (AuthProvider, error) {
	row := q.db.QueryRowContext(ctx, getAuthProviderByUserAndName, arg.UserID, arg.ProviderName)
	var i AuthProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProviderName,
		&i.ProviderUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password_hash, display_name, is_verified, created_at, updated_at FROM user
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, display_name, is_verified, created_at, updated_at FROM user
WHERE email = ?
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSetting = `-- name: GetUserSetting :one
SELECT id, user_id, theme, daily_new_cards_limit, notifications_enabled, tutorial_enabled, created_at, updated_at FROM user_setting
WHERE user_id = ?
LIMIT 1
`

func (q *Queries) GetUserSetting(ctx context.Context, userID string) (UserSetting, error) {
	row := q.db.QueryRowContext(ctx, getUserSetting, userID)
	var i UserSetting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Theme,
		&i.DailyNewCardsLimit,
		&i.NotificationsEnabled,
		&i.TutorialEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password_hash, display_name, is_verified, created_at, updated_at FROM user
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.DisplayName,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE user
SET
  email = ?,
  password_hash = ?,
  display_name = ?,
  is_verified = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, email, password_hash, display_name, is_verified, created_at, updated_at
`

type UpdateUserParams struct {
	Email        string         `json:"email"`
	PasswordHash sql.NullString `json:"password_hash"`
	DisplayName  sql.NullString `json:"display_name"`
	IsVerified   bool           `json:"is_verified"`
	ID           string         `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.PasswordHash,
		arg.DisplayName,
		arg.IsVerified,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserSetting = `-- name: UpdateUserSetting :one
UPDATE user_setting
SET
  theme = ?,
  daily_new_cards_limit = ?,
  notifications_enabled = ?,
  tutorial_enabled = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE user_id = ?
RETURNING id, user_id, theme, daily_new_cards_limit, notifications_enabled, tutorial_enabled, created_at, updated_at
`

type UpdateUserSettingParams struct {
	Theme                sql.NullString `json:"theme"`
	DailyNewCardsLimit   int64          `json:"daily_new_cards_limit"`
	NotificationsEnabled bool           `json:"notifications_enabled"`
	TutorialEnabled      bool           `json:"tutorial_enabled"`
	UserID               string         `json:"user_id"`
}

func (q *Queries) UpdateUserSetting(ctx context.Context, arg UpdateUserSettingParams) (UserSetting, error) {
	row := q.db.QueryRowContext(ctx, updateUserSetting,
		arg.Theme,
		arg.DailyNewCardsLimit,
		arg.NotificationsEnabled,
		arg.TutorialEnabled,
		arg.UserID,
	)
	var i UserSetting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Theme,
		&i.DailyNewCardsLimit,
		&i.NotificationsEnabled,
		&i.TutorialEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
