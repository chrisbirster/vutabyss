// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.query.sql

package database

import (
	"context"
	"database/sql"
)

const addCardToSession = `-- name: AddCardToSession :one
INSERT INTO session_card (
  session_id,
  card_id,
  status
)
VALUES (?, ?, ?)
RETURNING id, session_id, card_id, status, next_cram_due, created_at, updated_at
`

type AddCardToSessionParams struct {
	SessionID string         `json:"session_id"`
	CardID    string         `json:"card_id"`
	Status    sql.NullString `json:"status"`
}

func (q *Queries) AddCardToSession(ctx context.Context, arg AddCardToSessionParams) (SessionCard, error) {
	row := q.db.QueryRowContext(ctx, addCardToSession, arg.SessionID, arg.CardID, arg.Status)
	var i SessionCard
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.CardID,
		&i.Status,
		&i.NextCramDue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addDeckToSession = `-- name: AddDeckToSession :one
INSERT INTO session_deck (
  session_id,
  deck_id
)
VALUES (?, ?)
RETURNING id, session_id, deck_id, created_at, updated_at
`

type AddDeckToSessionParams struct {
	SessionID string `json:"session_id"`
	DeckID    string `json:"deck_id"`
}

func (q *Queries) AddDeckToSession(ctx context.Context, arg AddDeckToSessionParams) (SessionDeck, error) {
	row := q.db.QueryRowContext(ctx, addDeckToSession, arg.SessionID, arg.DeckID)
	var i SessionDeck
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.DeckID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRatingEntry = `-- name: CreateRatingEntry :one
INSERT INTO rating (name)
VALUES (?)
RETURNING id, name
`

func (q *Queries) CreateRatingEntry(ctx context.Context, name string) (Rating, error) {
	row := q.db.QueryRowContext(ctx, createRatingEntry, name)
	var i Rating
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createReview = `-- name: CreateReview :one
INSERT INTO review (
  card_id,
  rating_id,
  review_seconds,
  new_interval,
  new_stability,
  new_difficulty,
  new_due_date,
  session_id
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, card_id, review_time, rating_id, review_seconds, new_interval, new_stability, new_difficulty, new_due_date, session_id, created_at, updated_at
`

type CreateReviewParams struct {
	CardID        string          `json:"card_id"`
	RatingID      sql.NullString  `json:"rating_id"`
	ReviewSeconds sql.NullInt64   `json:"review_seconds"`
	NewInterval   sql.NullInt64   `json:"new_interval"`
	NewStability  sql.NullFloat64 `json:"new_stability"`
	NewDifficulty sql.NullFloat64 `json:"new_difficulty"`
	NewDueDate    sql.NullTime    `json:"new_due_date"`
	SessionID     sql.NullString  `json:"session_id"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.CardID,
		arg.RatingID,
		arg.ReviewSeconds,
		arg.NewInterval,
		arg.NewStability,
		arg.NewDifficulty,
		arg.NewDueDate,
		arg.SessionID,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.CardID,
		&i.ReviewTime,
		&i.RatingID,
		&i.ReviewSeconds,
		&i.NewInterval,
		&i.NewStability,
		&i.NewDifficulty,
		&i.NewDueDate,
		&i.SessionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO session (
  user_id,
  mode,
  name,
  session_deck_id
)
VALUES (?, ?, ?, ?)
RETURNING id, user_id, mode, name, start_time, end_time, is_active, session_deck_id, created_at, updated_at
`

type CreateSessionParams struct {
	UserID        string         `json:"user_id"`
	Mode          sql.NullString `json:"mode"`
	Name          sql.NullString `json:"name"`
	SessionDeckID string         `json:"session_deck_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.UserID,
		arg.Mode,
		arg.Name,
		arg.SessionDeckID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Mode,
		&i.Name,
		&i.StartTime,
		&i.EndTime,
		&i.IsActive,
		&i.SessionDeckID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM review
WHERE id = ?
`

func (q *Queries) DeleteReview(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteReview, id)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM session
WHERE id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getReview = `-- name: GetReview :one
SELECT id, card_id, review_time, rating_id, review_seconds, new_interval, new_stability, new_difficulty, new_due_date, session_id, created_at, updated_at FROM review
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetReview(ctx context.Context, id string) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReview, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.CardID,
		&i.ReviewTime,
		&i.RatingID,
		&i.ReviewSeconds,
		&i.NewInterval,
		&i.NewStability,
		&i.NewDifficulty,
		&i.NewDueDate,
		&i.SessionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, mode, name, start_time, end_time, is_active, session_deck_id, created_at, updated_at FROM session
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Mode,
		&i.Name,
		&i.StartTime,
		&i.EndTime,
		&i.IsActive,
		&i.SessionDeckID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRatings = `-- name: ListRatings :many
SELECT id, name FROM rating
ORDER BY id
`

func (q *Queries) ListRatings(ctx context.Context) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, listRatings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rating
	for rows.Next() {
		var i Rating
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReviewsByCard = `-- name: ListReviewsByCard :many
SELECT id, card_id, review_time, rating_id, review_seconds, new_interval, new_stability, new_difficulty, new_due_date, session_id, created_at, updated_at FROM review
WHERE card_id = ?
ORDER BY id
`

func (q *Queries) ListReviewsByCard(ctx context.Context, cardID string) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, listReviewsByCard, cardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.CardID,
			&i.ReviewTime,
			&i.RatingID,
			&i.ReviewSeconds,
			&i.NewInterval,
			&i.NewStability,
			&i.NewDifficulty,
			&i.NewDueDate,
			&i.SessionID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessionCards = `-- name: ListSessionCards :many
SELECT id, session_id, card_id, status, next_cram_due, created_at, updated_at FROM session_card
WHERE session_id = ?
ORDER BY id
`

func (q *Queries) ListSessionCards(ctx context.Context, sessionID string) ([]SessionCard, error) {
	rows, err := q.db.QueryContext(ctx, listSessionCards, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionCard
	for rows.Next() {
		var i SessionCard
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.CardID,
			&i.Status,
			&i.NextCramDue,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessionDecks = `-- name: ListSessionDecks :many
SELECT id, session_id, deck_id, created_at, updated_at FROM session_deck
WHERE session_id = ?
ORDER BY id
`

func (q *Queries) ListSessionDecks(ctx context.Context, sessionID string) ([]SessionDeck, error) {
	rows, err := q.db.QueryContext(ctx, listSessionDecks, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionDeck
	for rows.Next() {
		var i SessionDeck
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.DeckID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSessionCard = `-- name: RemoveSessionCard :exec
DELETE FROM session_card
WHERE id = ?
`

func (q *Queries) RemoveSessionCard(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, removeSessionCard, id)
	return err
}

const removeSessionDeck = `-- name: RemoveSessionDeck :exec
DELETE FROM session_deck
WHERE id = ?
`

func (q *Queries) RemoveSessionDeck(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, removeSessionDeck, id)
	return err
}

const updateSession = `-- name: UpdateSession :one
UPDATE session
SET
  name = ?,
  mode = ?,
  end_time = ?,
  is_active = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, user_id, mode, name, start_time, end_time, is_active, session_deck_id, created_at, updated_at
`

type UpdateSessionParams struct {
	Name     sql.NullString `json:"name"`
	Mode     sql.NullString `json:"mode"`
	EndTime  sql.NullTime   `json:"end_time"`
	IsActive bool           `json:"is_active"`
	ID       string         `json:"id"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSession,
		arg.Name,
		arg.Mode,
		arg.EndTime,
		arg.IsActive,
		arg.ID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Mode,
		&i.Name,
		&i.StartTime,
		&i.EndTime,
		&i.IsActive,
		&i.SessionDeckID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSessionCard = `-- name: UpdateSessionCard :one
UPDATE session_card
SET
  status = ?,
  next_cram_due = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE session_id = ?
  AND card_id = ?
RETURNING id, session_id, card_id, status, next_cram_due, created_at, updated_at
`

type UpdateSessionCardParams struct {
	Status      sql.NullString `json:"status"`
	NextCramDue sql.NullTime   `json:"next_cram_due"`
	SessionID   string         `json:"session_id"`
	CardID      string         `json:"card_id"`
}

func (q *Queries) UpdateSessionCard(ctx context.Context, arg UpdateSessionCardParams) (SessionCard, error) {
	row := q.db.QueryRowContext(ctx, updateSessionCard,
		arg.Status,
		arg.NextCramDue,
		arg.SessionID,
		arg.CardID,
	)
	var i SessionCard
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.CardID,
		&i.Status,
		&i.NextCramDue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
