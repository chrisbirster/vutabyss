// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notes.query.sql

package database

import (
	"context"
	"database/sql"
)

const createNote = `-- name: CreateNote :one
INSERT INTO note (
  deck_id,
  note_type_id,
  owner_id
)
VALUES (?, ?, ?)
RETURNING id, deck_id, note_type_id, owner_id, created_at, updated_at
`

type CreateNoteParams struct {
	DeckID     string `json:"deck_id"`
	NoteTypeID string `json:"note_type_id"`
	OwnerID    string `json:"owner_id"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote, arg.DeckID, arg.NoteTypeID, arg.OwnerID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.DeckID,
		&i.NoteTypeID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createNoteField = `-- name: CreateNoteField :one
INSERT INTO note_field (
  note_id,
  field_name,
  field_content
)
VALUES (?, ?, ?)
RETURNING id, note_id, field_name, field_content, created_at, updated_at
`

type CreateNoteFieldParams struct {
	NoteID       string `json:"note_id"`
	FieldName    string `json:"field_name"`
	FieldContent string `json:"field_content"`
}

func (q *Queries) CreateNoteField(ctx context.Context, arg CreateNoteFieldParams) (NoteField, error) {
	row := q.db.QueryRowContext(ctx, createNoteField, arg.NoteID, arg.FieldName, arg.FieldContent)
	var i NoteField
	err := row.Scan(
		&i.ID,
		&i.NoteID,
		&i.FieldName,
		&i.FieldContent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createNoteType = `-- name: CreateNoteType :one
INSERT INTO note_type (
  name,
  description,
  owner_id
)
VALUES (?, ?, ?)
RETURNING id, name, description, owner_id, created_at, updated_at
`

type CreateNoteTypeParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	OwnerID     string         `json:"owner_id"`
}

func (q *Queries) CreateNoteType(ctx context.Context, arg CreateNoteTypeParams) (NoteType, error) {
	row := q.db.QueryRowContext(ctx, createNoteType, arg.Name, arg.Description, arg.OwnerID)
	var i NoteType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM note
WHERE id = ?
`

func (q *Queries) DeleteNote(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteNote, id)
	return err
}

const deleteNoteField = `-- name: DeleteNoteField :exec
DELETE FROM note_field
WHERE id = ?
`

func (q *Queries) DeleteNoteField(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteNoteField, id)
	return err
}

const deleteNoteType = `-- name: DeleteNoteType :exec
DELETE FROM note_type
WHERE id = ?
`

func (q *Queries) DeleteNoteType(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteNoteType, id)
	return err
}

const getNote = `-- name: GetNote :one
SELECT id, deck_id, note_type_id, owner_id, created_at, updated_at FROM note
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetNote(ctx context.Context, id string) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNote, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.DeckID,
		&i.NoteTypeID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNoteType = `-- name: GetNoteType :one
SELECT id, name, description, owner_id, created_at, updated_at FROM note_type
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetNoteType(ctx context.Context, id string) (NoteType, error) {
	row := q.db.QueryRowContext(ctx, getNoteType, id)
	var i NoteType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFieldsByNote = `-- name: ListFieldsByNote :many
SELECT id, note_id, field_name, field_content, created_at, updated_at FROM note_field
WHERE note_id = ?
ORDER BY id
`

func (q *Queries) ListFieldsByNote(ctx context.Context, noteID string) ([]NoteField, error) {
	rows, err := q.db.QueryContext(ctx, listFieldsByNote, noteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NoteField
	for rows.Next() {
		var i NoteField
		if err := rows.Scan(
			&i.ID,
			&i.NoteID,
			&i.FieldName,
			&i.FieldContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNoteTypesByOwner = `-- name: ListNoteTypesByOwner :many
SELECT id, name, description, owner_id, created_at, updated_at FROM note_type
WHERE owner_id = ?
ORDER BY id
`

func (q *Queries) ListNoteTypesByOwner(ctx context.Context, ownerID string) ([]NoteType, error) {
	rows, err := q.db.QueryContext(ctx, listNoteTypesByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NoteType
	for rows.Next() {
		var i NoteType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotesByDeck = `-- name: ListNotesByDeck :many
SELECT id, deck_id, note_type_id, owner_id, created_at, updated_at FROM note
WHERE deck_id = ?
ORDER BY id
`

func (q *Queries) ListNotesByDeck(ctx context.Context, deckID string) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listNotesByDeck, deckID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.DeckID,
			&i.NoteTypeID,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
UPDATE note
SET
  note_type_id = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, deck_id, note_type_id, owner_id, created_at, updated_at
`

type UpdateNoteParams struct {
	NoteTypeID string `json:"note_type_id"`
	ID         string `json:"id"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, updateNote, arg.NoteTypeID, arg.ID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.DeckID,
		&i.NoteTypeID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateNoteField = `-- name: UpdateNoteField :one
UPDATE note_field
SET
  field_content = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE note_id = ?
  AND field_name = ?
RETURNING id, note_id, field_name, field_content, created_at, updated_at
`

type UpdateNoteFieldParams struct {
	FieldContent string `json:"field_content"`
	NoteID       string `json:"note_id"`
	FieldName    string `json:"field_name"`
}

func (q *Queries) UpdateNoteField(ctx context.Context, arg UpdateNoteFieldParams) (NoteField, error) {
	row := q.db.QueryRowContext(ctx, updateNoteField, arg.FieldContent, arg.NoteID, arg.FieldName)
	var i NoteField
	err := row.Scan(
		&i.ID,
		&i.NoteID,
		&i.FieldName,
		&i.FieldContent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateNoteType = `-- name: UpdateNoteType :one
UPDATE note_type
SET
  name = ?,
  description = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, description, owner_id, created_at, updated_at
`

type UpdateNoteTypeParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateNoteType(ctx context.Context, arg UpdateNoteTypeParams) (NoteType, error) {
	row := q.db.QueryRowContext(ctx, updateNoteType, arg.Name, arg.Description, arg.ID)
	var i NoteType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
