// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: card_templates.query.sql

package database

import (
	"context"
	"database/sql"
)

const createCardTemplate = `-- name: CreateCardTemplate :one
INSERT INTO card_template (
  note_type_id,
  template_name,
  front_html,
  back_html,
  css,
  owner_id
)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, note_type_id, template_name, front_html, back_html, css, owner_id, created_at, updated_at
`

type CreateCardTemplateParams struct {
	NoteTypeID   string         `json:"note_type_id"`
	TemplateName string         `json:"template_name"`
	FrontHtml    string         `json:"front_html"`
	BackHtml     string         `json:"back_html"`
	Css          sql.NullString `json:"css"`
	OwnerID      string         `json:"owner_id"`
}

func (q *Queries) CreateCardTemplate(ctx context.Context, arg CreateCardTemplateParams) (CardTemplate, error) {
	row := q.db.QueryRowContext(ctx, createCardTemplate,
		arg.NoteTypeID,
		arg.TemplateName,
		arg.FrontHtml,
		arg.BackHtml,
		arg.Css,
		arg.OwnerID,
	)
	var i CardTemplate
	err := row.Scan(
		&i.ID,
		&i.NoteTypeID,
		&i.TemplateName,
		&i.FrontHtml,
		&i.BackHtml,
		&i.Css,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCardTemplate = `-- name: DeleteCardTemplate :exec
DELETE FROM card_template
WHERE id = ?
`

func (q *Queries) DeleteCardTemplate(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCardTemplate, id)
	return err
}

const getCardTemplate = `-- name: GetCardTemplate :one
SELECT id, note_type_id, template_name, front_html, back_html, css, owner_id, created_at, updated_at FROM card_template
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetCardTemplate(ctx context.Context, id string) (CardTemplate, error) {
	row := q.db.QueryRowContext(ctx, getCardTemplate, id)
	var i CardTemplate
	err := row.Scan(
		&i.ID,
		&i.NoteTypeID,
		&i.TemplateName,
		&i.FrontHtml,
		&i.BackHtml,
		&i.Css,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCardTemplatesByNoteType = `-- name: ListCardTemplatesByNoteType :many
SELECT id, note_type_id, template_name, front_html, back_html, css, owner_id, created_at, updated_at FROM card_template
WHERE owner_id = ?
AND note_type_id = ?
ORDER BY id
`

type ListCardTemplatesByNoteTypeParams struct {
	OwnerID    string `json:"owner_id"`
	NoteTypeID string `json:"note_type_id"`
}

func (q *Queries) ListCardTemplatesByNoteType(ctx context.Context, arg ListCardTemplatesByNoteTypeParams) ([]CardTemplate, error) {
	rows, err := q.db.QueryContext(ctx, listCardTemplatesByNoteType, arg.OwnerID, arg.NoteTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CardTemplate
	for rows.Next() {
		var i CardTemplate
		if err := rows.Scan(
			&i.ID,
			&i.NoteTypeID,
			&i.TemplateName,
			&i.FrontHtml,
			&i.BackHtml,
			&i.Css,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCardTemplatesByOwner = `-- name: ListCardTemplatesByOwner :many
SELECT id, note_type_id, template_name, front_html, back_html, css, owner_id, created_at, updated_at FROM card_template
WHERE owner_id = ?
ORDER BY id
`

func (q *Queries) ListCardTemplatesByOwner(ctx context.Context, ownerID string) ([]CardTemplate, error) {
	rows, err := q.db.QueryContext(ctx, listCardTemplatesByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CardTemplate
	for rows.Next() {
		var i CardTemplate
		if err := rows.Scan(
			&i.ID,
			&i.NoteTypeID,
			&i.TemplateName,
			&i.FrontHtml,
			&i.BackHtml,
			&i.Css,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCardTemplate = `-- name: UpdateCardTemplate :one
UPDATE card_template
SET
  template_name = ?,
  front_html = ?,
  back_html = ?,
  css = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, note_type_id, template_name, front_html, back_html, css, owner_id, created_at, updated_at
`

type UpdateCardTemplateParams struct {
	TemplateName string         `json:"template_name"`
	FrontHtml    string         `json:"front_html"`
	BackHtml     string         `json:"back_html"`
	Css          sql.NullString `json:"css"`
	ID           string         `json:"id"`
}

func (q *Queries) UpdateCardTemplate(ctx context.Context, arg UpdateCardTemplateParams) (CardTemplate, error) {
	row := q.db.QueryRowContext(ctx, updateCardTemplate,
		arg.TemplateName,
		arg.FrontHtml,
		arg.BackHtml,
		arg.Css,
		arg.ID,
	)
	var i CardTemplate
	err := row.Scan(
		&i.ID,
		&i.NoteTypeID,
		&i.TemplateName,
		&i.FrontHtml,
		&i.BackHtml,
		&i.Css,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
