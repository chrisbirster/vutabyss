// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: teams.query.sql

package database

import (
	"context"
)

const addTeamMember = `-- name: AddTeamMember :one
INSERT INTO team_member (
  team_id,
  user_id,
  role
)
VALUES (?, ?, ?)
RETURNING id, team_id, user_id, role, created_at, updated_at
`

type AddTeamMemberParams struct {
	TeamID string `json:"team_id"`
	UserID string `json:"user_id"`
	Role   string `json:"role"`
}

func (q *Queries) AddTeamMember(ctx context.Context, arg AddTeamMemberParams) (TeamMember, error) {
	row := q.db.QueryRowContext(ctx, addTeamMember, arg.TeamID, arg.UserID, arg.Role)
	var i TeamMember
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTeam = `-- name: CreateTeam :one
INSERT INTO team (
  name,
  owner_id
)
VALUES (?,?)
RETURNING id, name, owner_id, created_at, updated_at
`

type CreateTeamParams struct {
	Name    string `json:"name"`
	OwnerID string `json:"owner_id"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.Name, arg.OwnerID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM team
WHERE id = ?
`

func (q *Queries) DeleteTeam(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, id)
	return err
}

const getTeam = `-- name: GetTeam :one
SELECT id, name, owner_id, created_at, updated_at FROM team
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetTeam(ctx context.Context, id string) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeam, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTeamMembers = `-- name: ListTeamMembers :many
SELECT id, team_id, user_id, role, created_at, updated_at FROM team_member
WHERE team_id = ?
`

func (q *Queries) ListTeamMembers(ctx context.Context, teamID string) ([]TeamMember, error) {
	rows, err := q.db.QueryContext(ctx, listTeamMembers, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamMember
	for rows.Next() {
		var i TeamMember
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeams = `-- name: ListTeams :many
SELECT id, name, owner_id, created_at, updated_at FROM team
ORDER BY id
`

func (q *Queries) ListTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTeamMember = `-- name: RemoveTeamMember :exec
DELETE FROM team_member
WHERE id = ?
`

func (q *Queries) RemoveTeamMember(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, removeTeamMember, id)
	return err
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE team
SET
  name = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, owner_id, created_at, updated_at
`

type UpdateTeamParams struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, updateTeam, arg.Name, arg.ID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTeamMember = `-- name: UpdateTeamMember :one
UPDATE team_member
SET role = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE team_id = ?
  AND user_id = ?
RETURNING id, team_id, user_id, role, created_at, updated_at
`

type UpdateTeamMemberParams struct {
	Role   string `json:"role"`
	TeamID string `json:"team_id"`
	UserID string `json:"user_id"`
}

func (q *Queries) UpdateTeamMember(ctx context.Context, arg UpdateTeamMemberParams) (TeamMember, error) {
	row := q.db.QueryRowContext(ctx, updateTeamMember, arg.Role, arg.TeamID, arg.UserID)
	var i TeamMember
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
